{"version":3,"sources":["webpack://sqlFormatter/webpack/universalModuleDefinition","webpack://sqlFormatter/webpack/bootstrap","webpack://sqlFormatter/./node_modules/editor-languages/lib/clickhouse/keywords.js","webpack://sqlFormatter/./node_modules/editor-languages/lib/clickhouse/builtins.js","webpack://sqlFormatter/./src/core/tokenTypes.js","webpack://sqlFormatter/./src/utils.js","webpack://sqlFormatter/./src/core/Indentation.js","webpack://sqlFormatter/./src/core/InlineBlock.js","webpack://sqlFormatter/./src/core/Params.js","webpack://sqlFormatter/./src/core/token.js","webpack://sqlFormatter/./src/core/Formatter.js","webpack://sqlFormatter/./src/core/regexFactory.js","webpack://sqlFormatter/./src/core/Tokenizer.js","webpack://sqlFormatter/./src/languages/TinybirdFormatter.js","webpack://sqlFormatter/./src/sqlFormatter.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","WORD","STRING","RESERVED","RESERVED_TOP_LEVEL","RESERVED_TOP_LEVEL_NO_INDENT","RESERVED_NEWLINE","OPERATOR","OPEN_PAREN","CLOSE_PAREN","LINE_COMMENT","BLOCK_COMMENT","NUMBER","PLACEHOLDER","trimSpacesEnd","str","replace","escapeRegExp","string","sortByLengthDesc","strings","sort","a","b","length","localeCompare","Indentation","indent","this","indentTypes","repeat","push","arr","pop","InlineBlock","level","tokens","index","isInlineBlock","token","type","tokenTypes","isForbiddenToken","COMMENT","Params","params","isToken","regex","test","isAnd","isBetween","isLimit","Formatter","cfg","indentation","inlineBlock","previousReservedToken","Error","query","tokenizer","tokenize","getFormattedQueryFromTokens","trim","formattedQuery","forEach","tokenOverride","formatLineComment","formatBlockComment","formatTopLevelReservedWord","formatTopLevelReservedWordNoIndent","formatNewlineReservedWord","formatWithSpaces","formatOpeningParentheses","formatClosingParentheses","formatPlaceholder","formatComma","formatWithSpaceAfter","formatWithoutSpaces","formatQuerySeparator","addNewline","show","indentComment","comment","getIndent","decreaseTopLevel","equalizeWhitespace","increaseTopLevel","tokenLookBehind","preserveWhitespaceFor","whitespaceBefore","beginIfPossible","isActive","increaseBlockLevel","end","decreaseBlockLevel","resetIndentation","linesBetweenQueries","uppercase","toUpperCase","endsWith","createReservedWordRegex","reservedWords","RegExp","reservedWordsPattern","join","createStringPattern","stringTypes","patterns","$$","map","createParenRegex","parens","escapeParen","paren","createPlaceholderRegex","types","pattern","Array","isArray","typesRegex","Tokenizer","multiLetterOperators","lineCommentTypes","WHITESPACE_REGEX","NUMBER_REGEX","OPERATOR_REGEX","operators","BLOCK_COMMENT_REGEX","LINE_COMMENT_REGEX","RESERVED_TOP_LEVEL_REGEX","regexFactory","reservedTopLevelWords","RESERVED_TOP_LEVEL_NO_INDENT_REGEX","reservedTopLevelWordsNoIndent","RESERVED_NEWLINE_REGEX","reservedNewlineWords","RESERVED_PLAIN_REGEX","WORD_REGEX","specialChars","specialWordChars","STRING_REGEX","OPEN_PAREN_REGEX","openParens","CLOSE_PAREN_REGEX","closeParens","INDEXED_PLACEHOLDER_REGEX","indexedPlaceholderTypes","IDENT_NAMED_PLACEHOLDER_REGEX","namedPlaceholderTypes","STRING_NAMED_PLACEHOLDER_REGEX","input","getWhitespace","substring","getNextToken","matches","match","previousToken","getCommentToken","getStringToken","getOpenParenToken","getCloseParenToken","getPlaceholderToken","getNumberToken","getReservedWordToken","getWordToken","getOperatorToken","getLineCommentToken","getBlockCommentToken","getTokenOnFirstMatch","getIdentNamedPlaceholderToken","getStringNamedPlaceholderToken","getIndexedPlaceholderToken","getPlaceholderTokenWithKey","parseKey","v","slice","getEscapedPlaceholderKey","quoteChar","getTopLevelReservedToken","getNewlineReservedToken","getTopLevelReservedTokenNoIndent","getPlainReservedToken","undefined","keywords","item","builtins","TinybirdFormatter","formatters","tinybird","format","supportedDialects","keys"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAsB,aAAID,IAE1BD,EAAmB,aAAIC,IARzB,CASGK,QAAQ,WACX,O,YCTE,IAAIC,EAAmB,GAGvB,SAASC,EAAoBC,GAG5B,GAAGF,EAAiBE,GACnB,OAAOF,EAAiBE,GAAUP,QAGnC,IAAIC,EAASI,EAAiBE,GAAY,CACzCC,EAAGD,EACHE,GAAG,EACHT,QAAS,IAUV,OANAU,EAAQH,GAAUI,KAAKV,EAAOD,QAASC,EAAQA,EAAOD,QAASM,GAG/DL,EAAOQ,GAAI,EAGJR,EAAOD,QA0Df,OArDAM,EAAoBM,EAAIF,EAGxBJ,EAAoBO,EAAIR,EAGxBC,EAAoBQ,EAAI,SAASd,EAASe,EAAMC,GAC3CV,EAAoBW,EAAEjB,EAASe,IAClCG,OAAOC,eAAenB,EAASe,EAAM,CAAEK,YAAY,EAAMC,IAAKL,KAKhEV,EAAoBgB,EAAI,SAAStB,GACX,oBAAXuB,QAA0BA,OAAOC,aAC1CN,OAAOC,eAAenB,EAASuB,OAAOC,YAAa,CAAEC,MAAO,WAE7DP,OAAOC,eAAenB,EAAS,aAAc,CAAEyB,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKX,OAAOY,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBX,OAAOC,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBQ,EAAEe,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAShC,GAChC,IAAIe,EAASf,GAAUA,EAAO2B,WAC7B,WAAwB,OAAO3B,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAK,EAAoBQ,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRV,EAAoBW,EAAI,SAASiB,EAAQC,GAAY,OAAOjB,OAAOkB,UAAUC,eAAe1B,KAAKuB,EAAQC,IAGzG7B,EAAoBgC,EAAI,GAIjBhC,EAAoBA,EAAoBiC,EAAI,G,+HClFtC,OACb,WACA,QACA,OACA,KACA,SACA,OACA,SACA,SACA,QACA,OACA,YACA,SACA,cACA,WACA,SACA,MACA,MACA,WACA,SACA,OACA,SACA,OACA,SACA,OACA,QACA,OACA,QACA,KACA,QACA,WACA,CACE,QACA,UACA,mCAGA,uBACA,eAEF,CACE,UACA,UACA,oFAKA,0BACA,SAEF,KACA,OACA,SACA,SACA,CACE,QACA,UACA,mCAGA,uBACA,eAEF,MACA,OACA,WACA,QACA,QACA,MACA,SACA,KACA,SACA,OACA,QACA,OACA,MACA,KACA,KACA,MACA,OChFa,GACb,OACA,QACA,WACA,SACA,SACA,eACA,SACA,SACA,MACA,SACA,CACE,WACA,OACA,yGAKA,wBACA,eAEF,QACA,SACA,SACA,eACA,gBACA,SACA,YACA,OACA,UACA,eACA,kBACA,UACA,WACA,WACA,WACA,SACA,UACA,UACA,UACA,YACA,YACA,gBACA,iBACA,iBACA,iBACA,eACA,gBACA,gBACA,gBACA,kBACA,kBACA,cACA,cACA,eACA,CACE,SACA,OACA,kMAKA,sBACA,eAEF,aACA,WACA,gBACA,oBACA,yBACA,2BACA,yBACA,2BACA,wBACA,0BACA,qBACA,sBACA,sBACA,sBACA,oBACA,qBACA,qBACA,qBACA,uBACA,uBACA,oBACA,wBACA,sBACA,CACE,aACA,OACA,gIAKA,0BACA,OAEF,CACE,WACA,OACA,2HAKA,wBACA,OAEF,SACA,UACA,eACA,cACA,SACA,WACA,WACA,WACA,CACE,gBACA,OACA,6hBAKA,4CACA,8BAEF,CACE,iBACA,OACA,sOAKA,6CACA,8BAEF,CACE,mBACA,OACA,6TAKA,+CACA,8BAEF,CACE,gBACA,OACA,mOAKA,4CACA,8BAEF,CACE,eACA,OACA,kMAKA,mCACA,sBAEF,CACE,gBACA,OACA,mMAKA,oCACA,sBAEF,CACE,kBACA,OACA,2MAKA,sCACA,sBAEF,CACE,sBACA,OACA,iOAKA,0CACA,sBAEF,CACE,0BACA,OACA,4OAKA,8CACA,sBAEF,CACE,oBACA,OACA,wmBAKA,iEACA,8BAEF,SACA,oBACA,qBACA,oBACA,mBACA,oBACA,sBACA,sBACA,WACA,aACA,mBACA,CACE,WACA,OACA,wJAKA,2BACA,eAEF,CACE,YACA,OACA,2JAKA,4BACA,eAEF,CACE,WACA,OACA,wJAKA,2BACA,eAEF,CACE,UACA,OACA,qJAKA,0BACA,eAEF,CACE,WACA,OACA,wJAKA,2BACA,eAEF,CACE,aACA,OACA,8JAKA,6BACA,eAEF,CACE,aACA,OACA,8JAKA,6BACA,eAEF,CACE,cACA,OACA,iKAKA,8BACA,eAEF,CACE,MACA,OACA,kMAKA,SAEF,QACA,CACE,QACA,OACA,4PAKA,WAEF,CACE,YACA,OACA,kQAKA,eAEF,WACA,YACA,iBACA,QACA,WACA,SACA,aACA,QACA,QACA,YACA,YACA,UACA,cACA,SACA,YACA,gBACA,6BACA,iBACA,eACA,eACA,kBACA,WACA,eACA,QACA,UACA,aACA,OACA,UACA,aACA,aACA,mBACA,mBACA,kBACA,mBACA,mBACA,mBACA,iBACA,kBACA,kBACA,kBACA,oBACA,oBACA,iBACA,qBACA,mBACA,qBACA,QACA,QACA,cACA,eACA,MACA,SACA,SACA,UACA,aACA,iBACA,qBACA,YACA,eACA,gBACA,gBACA,iBACA,cACA,aACA,YACA,WACA,WACA,cACA,aACA,cACA,WACA,WACA,cACA,YACA,mBACA,aACA,kBACA,CACE,WACA,OACA,gIAKA,kBAEF,cACA,gBACA,oBACA,cACA,WACA,SACA,mBACA,iBACA,4BACA,iCACA,OACA,WACA,cACA,WACA,yBACA,sBACA,uBACA,2BACA,eACA,mBACA,qBACA,SACA,iBACA,cACA,4BACA,kBACA,kBACA,kBACA,wBACA,kBACA,kBACA,OACA,SACA,eACA,UACA,MACA,YACA,aACA,aACA,YACA,YACA,SACA,SACA,UACA,MACA,QACA,kBACA,kBACA,gBACA,iBACA,QACA,OACA,QACA,cACA,gBACA,WACA,KACA,UACA,cACA,IACA,KACA,MACA,MACA,OACA,OACA,QACA,QACA,OACA,OACA,MACA,OACA,SACA,SACA,MACA,MACA,MACA,OACA,OACA,OACA,MACA,eACA,eACA,mBACA,kBACA,oBACA,qBACA,WACA,kBACA,eACA,sBACA,mBACA,kBACA,iBACA,cACA,gBACA,gBACA,iBACA,OACA,OACA,eACA,gBACA,gBACA,gBACA,cACA,eACA,eACA,eACA,iBACA,iBACA,cACA,kBACA,gBACA,cACA,oBACA,WACA,mBACA,UACA,gBACA,wBACA,uBACA,yBACA,wBACA,uBACA,0BACA,KACA,QACA,eACA,WACA,eACA,aACA,YACA,cACA,SACA,QACA,kBACA,CACE,UACA,OACA,wIAKA,yDACA,oBAEF,mBACA,qBACA,aACA,WACA,aACA,QACA,SACA,YACA,WACA,SACA,SACA,gBACA,aACA,MACA,YACA,QACA,QACA,WACA,SACA,UACA,uBACA,oBACA,iBACA,iBACA,iBACA,oBACA,mBACA,sBACA,6BACA,YACA,YACA,WACA,cACA,SACA,QACA,MACA,WACA,UACA,cACA,aACA,cACA,MACA,MACA,SACA,SACA,MACA,kBACA,SACA,MACA,cACA,CACE,OACA,OACA,gPAKA,UACA,KAEF,CACE,YACA,OACA,iPAKA,eACA,KAEF,CACE,YACA,OACA,kVAKA,eACA,KAEF,CACE,eACA,OACA,4PAKA,kBACA,KAEF,WACA,aACA,mBACA,qBACA,iBACA,SACA,eACA,sBACA,uBACA,UACA,SACA,aACA,YACA,YACA,WACA,OACA,CACE,OACA,OACA,8KAKA,WACA,KAEF,CACE,YACA,OACA,0OAKA,oCACA,kBAEF,WACA,YACA,iBACA,kBACA,yBACA,0BACA,wBACA,yBACA,gBACA,wBACA,kBACA,gBACA,gBACA,eACA,YACA,WACA,CACE,UACA,OACA,sNAKA,gBACA,QAEF,QACA,YACA,QACA,QACA,WACA,WACA,QACA,QACA,SACA,cACA,cACA,eACA,mBACA,WACA,iBACA,wBACA,yBACA,YACA,WACA,eACA,cACA,cACA,aACA,SACA,aACA,cACA,mBACA,oBACA,2BACA,4BACA,0BACA,2BACA,kBACA,aACA,aACA,cACA,sBACA,aACA,WACA,eACA,WACA,WACA,cACA,cACA,WACA,WACA,YACA,iBACA,iBACA,kBACA,sBACA,cACA,oBACA,2BACA,4BACA,eACA,cACA,kBACA,iBACA,iBACA,gBACA,YACA,gBACA,iBACA,sBACA,uBACA,8BACA,+BACA,6BACA,8BACA,qBACA,gBACA,aACA,WACA,eACA,WACA,WACA,cACA,cACA,WACA,WACA,YACA,iBACA,iBACA,kBACA,sBACA,cACA,oBACA,2BACA,4BACA,eACA,cACA,kBACA,iBACA,iBACA,gBACA,YACA,gBACA,iBACA,sBACA,uBACA,8BACA,+BACA,6BACA,8BACA,qBACA,gBACA,aACA,WACA,eACA,WACA,WACA,cACA,cACA,WACA,WACA,YACA,iBACA,iBACA,kBACA,sBACA,cACA,oBACA,2BACA,4BACA,eACA,cACA,kBACA,iBACA,iBACA,gBACA,YACA,gBACA,iBACA,sBACA,uBACA,8BACA,+BACA,6BACA,8BACA,qBACA,gBACA,OACA,QACA,UACA,SACA,MACA,OACA,CACE,oBACA,OACA,iSAKA,8CACA,QAEF,CACE,kBACA,OACA,uVAKA,4CACA,QAEF,CACE,cACA,OACA,mQAKA,wCACA,QAEF,CACE,sBACA,OACA,+GAKA,4BACA,QAEF,wBACA,6BC96Ba,GACbC,KAAM,OACNC,OAAQ,SACRC,SAAU,WACVC,mBAAoB,qBACpBC,6BAA8B,+BAC9BC,iBAAkB,mBAClBC,SAAU,WACVC,WAAY,aACZC,YAAa,cACbC,aAAc,eACdC,cAAe,gBACfC,OAAQ,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","file":"sql-formatter.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"sqlFormatter\"] = factory();\n\telse\n\t\troot[\"sqlFormatter\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default [\n  'database',\n  'table',\n  'view',\n  'as',\n  'attach',\n  'drop',\n  'detach',\n  'rename',\n  'alter',\n  'show',\n  'databases',\n  'tables',\n  'processlist',\n  'describe',\n  'exists',\n  'use',\n  'set',\n  'optimize',\n  'insert',\n  'into',\n  'select',\n  'from',\n  'sample',\n  'join',\n  'inner',\n  'left',\n  'right',\n  'on',\n  'where',\n  'prewhere',\n  [\n    'group',\n    'keyword',\n    `\n  **GROUP BY column_name**\n  `,\n    'GROUP BY column_name',\n    'column_name'\n  ],\n  [\n    'between',\n    'keyword',\n    `\n  **BETWEEN cond1 AND cond2**\n  \n  Shortcut for filter between two values. \n`,\n    'BETWEEN cond1 AND cond2',\n    'cond1'\n  ],\n  'by',\n  'with',\n  'totals',\n  'having',\n  [\n    'order',\n    'keyword',\n    `\n  **ORDER BY column_name**\n  `,\n    'ORDER BY column_name',\n    'column_name'\n  ],\n  'asc',\n  'desc',\n  'distinct',\n  'limit',\n  'union',\n  'all',\n  'format',\n  'in',\n  'engine',\n  'kill',\n  'query',\n  'null',\n  'and',\n  'is',\n  'or',\n  'not',\n  'xor'\n]\n","export default [\n  'plus',\n  'minus',\n  'multiply',\n  'divide',\n  'intDiv',\n  'intDivOrZero',\n  'modulo',\n  'negate',\n  'abs',\n  'bitAnd',\n  [\n    'bitCount',\n    'fn()',\n    `\n  **bitCount(column_name)**\n\n  Calculate the number of set bits in the supplied integer number\n  `,\n    'bitCount(column_name)',\n    'column_name'\n  ],\n  'bitOr',\n  'bitXor',\n  'bitNot',\n  'bitShiftLeft',\n  'bitShiftRight',\n  'equals',\n  'notEquals',\n  'less',\n  'greater',\n  'lessOrEquals',\n  'greaterOrEquals',\n  'toUInt8',\n  'toUInt16',\n  'toUInt32',\n  'toUInt64',\n  'toInt8',\n  'toInt16',\n  'toInt32',\n  'toInt64',\n  'toFloat32',\n  'toFloat64',\n  'toUInt8OrZero',\n  'toUInt16OrZero',\n  'toUInt32OrZero',\n  'toUInt64OrZero',\n  'toInt8OrZero',\n  'toInt16OrZero',\n  'toInt32OrZero',\n  'toInt64OrZero',\n  'toFloat32OrZero',\n  'toFloat64OrZero',\n  'toDecimal32',\n  'toDecimal64',\n  'toDecimal128',\n  [\n    'toDate',\n    'fn()',\n    `\n  **toDate(column_name)**\n\n  Converts value to date without time. [Learn more](https://clickhouse.yandex/docs/en/query_language/functions/type_conversion_functions/#todate-todatetime)\n  `,\n    `toDate(column_name)`,\n    `column_name`\n  ],\n  'toDateTime',\n  'toString',\n  'toFixedString',\n  'toStringCutToZero',\n  'toUnixTimestamp64Milli',\n  'fromUnixTimestamp64Milli',\n  'toUnixTimestamp64Micro',\n  'fromUnixTimestamp64Micro',\n  'toUnixTimestamp64Nano',\n  'fromUnixTimestamp64Nano',\n  'reinterpretAsUInt8',\n  'reinterpretAsUInt16',\n  'reinterpretAsUInt32',\n  'reinterpretAsUInt64',\n  'reinterpretAsInt8',\n  'reinterpretAsInt16',\n  'reinterpretAsInt32',\n  'reinterpretAsInt64',\n  'reinterpretAsFloat32',\n  'reinterpretAsFloat64',\n  'reinterpretAsDate',\n  'reinterpretAsDateTime',\n  'reinterpretAsString',\n  [\n    'startsWith',\n    'fn()',\n    `\n  **startsWith(str, prefix)**\n  \n  Returns 1 whether string starts with the specified prefix, otherwise it returns 0.\n  `,\n    `startsWith(str, prefix)`,\n    'str'\n  ],\n  [\n    'endsWith',\n    'fn()',\n    `\n  **endsWith(str, suffix)**\n  \n  Returns 1 if the string ends with the specified suffix, otherwise it returns 0.\n  `,\n    `endsWith(str, suffix)`,\n    'str'\n  ],\n  'toYear',\n  'toMonth',\n  'toDayOfMonth',\n  'toDayOfWeek',\n  'toHour',\n  'toMinute',\n  'toSecond',\n  'toMonday',\n  [\n    'toStartOfWeek',\n    'fn()',\n    `\n  **toStartOfWeek(t, [mode])**\n\n  Rounds down a date or date with time to the nearest Sunday or Monday by mode. Returns the date. The mode argument works exactly like the mode argument to [toWeek()](https://clickhouse.tech/docs/en/query_language/functions/date_time_functions/#toweek-date-mode). For the single-argument syntax, a mode value of 0 is used, where week 1 is the first one with a Sunday in the given year. [Learn more](https://clickhouse.tech/docs/en/query_language/functions/date_time_functions/#tostartofweek-t-mode)\n  `,\n    `toStartOfWeek(column_or_date_or_datetime)`,\n    `column_or_date_or_datetime`\n  ],\n  [\n    'toStartOfMonth',\n    'fn()',\n    `\n  **toStartOfMonth(t)**\n\n  Rounds down a date or date with time to the first day of the month. Returns the date. [Learn more](https://clickhouse.tech/docs/en/query_language/functions/date_time_functions/#tostartofmonth)\n  `,\n    `toStartOfMonth(column_or_date_or_datetime)`,\n    `column_or_date_or_datetime`\n  ],\n  [\n    'toStartOfQuarter',\n    'fn()',\n    `\n  **toStartOfQuarter(t)**\n\n  Rounds down a date or date with time to the first day of the quarter. The first day of the quarter is either 1 January, 1 April, 1 July, or 1 October. Returns the date. [Learn more](https://clickhouse.tech/docs/en/query_language/functions/date_time_functions/#tostartofquarter)\n  `,\n    `toStartOfQuarter(column_or_date_or_datetime)`,\n    `column_or_date_or_datetime`\n  ],\n  [\n    'toStartOfYear',\n    'fn()',\n    `\n  **toStartOfYear(t)**\n\n  Rounds down a date or date with time to the first day of the year. Returns the date. [Learn more](https://clickhouse.tech/docs/en/query_language/functions/date_time_functions/#tostartofyear)\n  `,\n    `toStartOfYear(column_or_date_or_datetime)`,\n    `column_or_date_or_datetime`\n  ],\n  [\n    'toStartOfDay',\n    'fn()',\n    `\n  **toStartOfDay(t)**\n\n  Rounds down a date with time to the start of the day. [Learn more](https://clickhouse.tech/docs/en/query_language/functions/date_time_functions/#tostartofday)\n  `,\n    `toStartOfDay(column_or_datetime)`,\n    `column_or_datetime`\n  ],\n  [\n    'toStartOfHour',\n    'fn()',\n    `\n  **toStartOfHour(t)**\n\n  Rounds down date with time to the start of the hour. [Learn more](https://clickhouse.tech/docs/en/query_language/functions/date_time_functions/#tostartofhour)\n  `,\n    `toStartOfHour(column_or_datetime)`,\n    `column_or_datetime`\n  ],\n  [\n    'toStartOfMinute',\n    'fn()',\n    `\n  **toStartOfMinute(t)**\n\n  Rounds down a date with time to the start of the minute. [Learn more](https://clickhouse.tech/docs/en/query_language/functions/date_time_functions/#tostartofminute)\n  `,\n    `toStartOfMinute(column_or_datetime)`,\n    `column_or_datetime`\n  ],\n  [\n    'toStartOfFiveMinute',\n    'fn()',\n    `\n  **toStartOfFiveMinute(t)**\n\n  Rounds down a date with time to the start of the five-minute interval. [Learn more](https://clickhouse.tech/docs/en/query_language/functions/date_time_functions/#tostartoffiveminute)\n  `,\n    `toStartOfFiveMinute(column_or_datetime)`,\n    `column_or_datetime`\n  ],\n  [\n    'toStartOfFifteenMinutes',\n    'fn()',\n    `\n  **toStartOfFifteenMinutes(t)**\n\n  Rounds down a date with time to the start of the fifteen-minute interval. [Learn more](https://clickhouse.tech/docs/en/query_language/functions/date_time_functions/#tostartoffifteenminutes)\n  `,\n    `toStartOfFifteenMinutes(column_or_datetime)`,\n    `column_or_datetime`\n  ],\n  [\n    'toStartOfInterval',\n    'fn()',\n    `\n  **toStartOfInterval(t, INTERVAL x unit [, time_zone])**\n\n  This is a generalization of other functions named toStartOf*. For example, toStartOfInterval(t, INTERVAL 1 year) returns the same as toStartOfYear(t), toStartOfInterval(t, INTERVAL 1 month) returns the same as toStartOfMonth(t), toStartOfInterval(t, INTERVAL 1 day) returns the same as toStartOfDay(t), toStartOfInterval(t, INTERVAL 15 minute) returns the same as toStartOfFifteenMinutes(t) etc. [Learn more](https://clickhouse.tech/docs/en/query_language/functions/date_time_functions/#tostartofinterval-time-or-data-interval-x-unit-time-zone)\n  `,\n    `toStartOfInterval(column_or_date_or_datetime, INTERVAL x unit)`,\n    `column_or_date_or_datetime`\n  ],\n  'toTime',\n  'toRelativeYearNum',\n  'toRelativeMonthNum',\n  'toRelativeWeekNum',\n  'toRelativeDayNum',\n  'toRelativeHourNum',\n  'toRelativeMinuteNum',\n  'toRelativeSecondNum',\n  'toYYYYMM',\n  'toYYYYMMDD',\n  'toYYYYMMDDhhmmss',\n  [\n    'addYears',\n    'fn()',\n    `\n  **addYears(column_name, number_of_years)**\n\n  Function adds specified number of years to a Date/DateTime and then return the Date/DateTime.\n  `,\n    `addYears(column_name, 1)`,\n    `column_name`\n  ],\n  [\n    'addMonths',\n    'fn()',\n    `\n  **addMonths(column_name, number_of_months)**\n\n  Function adds specified number of months to a Date/DateTime and then return the Date/DateTime.\n  `,\n    `addMonths(column_name, 1)`,\n    `column_name`\n  ],\n  [\n    'addWeeks',\n    'fn()',\n    `\n  **addWeeks(column_name, number_of_weeks)**\n\n  Function adds specified number of weeks to a Date/DateTime and then return the Date/DateTime.\n  `,\n    `addWeeks(column_name, 1)`,\n    `column_name`\n  ],\n  [\n    'addDays',\n    'fn()',\n    `\n  **addDays(column_name, number_of_days)**\n\n  Function adds specified number of days to a Date/DateTime and then return the Date/DateTime.\n  `,\n    `addDays(column_name, 1)`,\n    `column_name`\n  ],\n  [\n    'addHours',\n    'fn()',\n    `\n  **addHours(column_name, number_of_hours)**\n\n  Function adds specified number of hours to a Date/DateTime and then return the Date/DateTime.\n  `,\n    `addHours(column_name, 1)`,\n    `column_name`\n  ],\n  [\n    'addMinutes',\n    'fn()',\n    `\n  **addMinutes(column_name, number_of_minutes)**\n\n  Function adds specified number of minutes to a Date/DateTime and then return the Date/DateTime.\n  `,\n    `addMinutes(column_name, 1)`,\n    `column_name`\n  ],\n  [\n    'addSeconds',\n    'fn()',\n    `\n  **addSeconds(column_name, number_of_seconds)**\n\n  Function adds specified number of seconds to a Date/DateTime and then return the Date/DateTime.\n  `,\n    `addSeconds(column_name, 1)`,\n    `column_name`\n  ],\n  [\n    'addQuarters',\n    'fn()',\n    `\n  **addQuarters(column_name, number_of_quarters)**\n\n  Function adds specified number of quarters to a Date/DateTime and then return the Date/DateTime.\n  `,\n    `addQuarters(column_name, 1)`,\n    `column_name`\n  ],\n  [\n    'now',\n    'fn()',\n    `\n  **now()**\n  \n  Returns the current time at one of the moments of request execution. [Learn more](https://clickhouse.yandex/docs/en/query_language/functions/date_time_functions/#now)\n  `,\n    `now()`\n  ],\n  'now64',\n  [\n    'today',\n    'fn()',\n    `\n  **today()**\n  \n  Accepts zero arguments and returns the current date at one of the moments of request execution. The same as 'toDate(now())'. [Learn more](https://clickhouse.tech/docs/en/query_language/functions/date_time_functions/#today)\n  `,\n    `today()`\n  ],\n  [\n    'yesterday',\n    'fn()',\n    `\n  **yesterday()**\n  \n  Accepts zero arguments and returns yesterday's date at one of the moments of request execution. The same as 'today() - 1'. [Learn more](https://clickhouse.tech/docs/en/query_language/functions/date_time_functions/#yesterday)\n  `,\n    `yesterday()`\n  ],\n  'timeSlot',\n  'timeSlots',\n  'formatDateTime',\n  'empty',\n  'notEmpty',\n  'length',\n  'lengthUTF8',\n  'lower',\n  'upper',\n  'lowerUTF8',\n  'upperUTF8',\n  'reverse',\n  'reverseUTF8',\n  'concat',\n  'substring',\n  'substringUTF8',\n  'appendTrailingCharIfAbsent',\n  'convertCharset',\n  'base64Encode',\n  'base64Decode',\n  'tryBase64Decode',\n  'position',\n  'positionUTF8',\n  'match',\n  'extract',\n  'extractAll',\n  'like',\n  'notLike',\n  'replaceOne',\n  'replaceAll',\n  'replaceRegexpOne',\n  'replaceRegexpAll',\n  'emptyArrayUInt8',\n  'emptyArrayUInt16',\n  'emptyArrayUInt32',\n  'emptyArrayUInt64',\n  'emptyArrayInt8',\n  'emptyArrayInt16',\n  'emptyArrayInt32',\n  'emptyArrayInt64',\n  'emptyArrayFloat32',\n  'emptyArrayFloat64',\n  'emptyArrayDate',\n  'emptyArrayDateTime',\n  'emptyArrayString',\n  'emptyArrayToSingle',\n  'range',\n  'array',\n  'arrayConcat',\n  'arrayElement',\n  'has',\n  'hasAll',\n  'hasAny',\n  'indexOf',\n  'countEqual',\n  'arrayEnumerate',\n  'arrayEnumerateUniq',\n  'arrayJoin',\n  'arrayPopBack',\n  'arrayPopFront',\n  'arrayPushBack',\n  'arrayPushFront',\n  'arrayResize',\n  'arraySlice',\n  'arrayUniq',\n  'operator',\n  'arrayMap',\n  'arrayFilter',\n  'arrayCount',\n  'arrayExists',\n  'arrayAll',\n  'arraySum',\n  'arrayCumSum',\n  'arraySort',\n  'arrayReverseSort',\n  'arrayFirst',\n  'arrayFirstIndex',\n  [\n    'arrayZip',\n    'fn()',\n    `\n  **arrayZip(arr1, arr2, ..., arrN)**\n\n  Allows to combine multiple arrays of equal lengths into one array of tuples.\n  `,\n    'arrayZip(arr1)'\n  ],\n  'splitByChar',\n  'splitByString',\n  'arrayStringConcat',\n  'alphaTokens',\n  'protocol',\n  'domain',\n  'domainWithoutWWW',\n  'topLevelDomain',\n  'firstSignificantSubdomain',\n  'cutToFirstSignificantSubdomain',\n  'path',\n  'pathFull',\n  'queryString',\n  'fragment',\n  'queryStringAndFragment',\n  'extractURLParameter',\n  'extractURLParameters',\n  'extractURLParameterNames',\n  'URLHierarchy',\n  'URLPathHierarchy',\n  'decodeURLComponent',\n  'cutWWW',\n  'cutQueryString',\n  'cutFragment',\n  'cutQueryStringAndFragment',\n  'cutURLParameter',\n  'IPv4NumToString',\n  'IPv4StringToNum',\n  'IPv4NumToStringClassC',\n  'IPv6NumToString',\n  'IPv6StringToNum',\n  'rand',\n  'rand64',\n  'randConstant',\n  'halfMD5',\n  'MD5',\n  'sipHash64',\n  'sipHash128',\n  'cityHash64',\n  'intHash32',\n  'intHash64',\n  'SHA224',\n  'SHA256',\n  'URLHash',\n  'hex',\n  'unhex',\n  'UUIDStringToNum',\n  'UUIDNumToString',\n  'bitmaskToList',\n  'bitmaskToArray',\n  'floor',\n  'ceil',\n  'round',\n  'roundToExp2',\n  'roundDuration',\n  'roundAge',\n  'if',\n  'multiIf',\n  'ifNotFinite',\n  'e',\n  'pi',\n  'exp',\n  'log',\n  'exp2',\n  'log2',\n  'exp10',\n  'log10',\n  'sqrt',\n  'cbrt',\n  'erf',\n  'erfc',\n  'lgamma',\n  'tgamma',\n  'sin',\n  'cos',\n  'tan',\n  'asin',\n  'acos',\n  'atan',\n  'pow',\n  'regionToCity',\n  'regionToArea',\n  'regionToDistrict',\n  'regionToCountry',\n  'regionToContinent',\n  'regionToPopulation',\n  'regionIn',\n  'regionHierarchy',\n  'regionToName',\n  'greatCircleDistance',\n  'greatCircleAngle',\n  'pointInEllipses',\n  'pointInPolygon',\n  'geoDistance',\n  'geohashEncode',\n  'geohashDecode',\n  'geohashesInBox',\n  'OSIn',\n  'SEIn',\n  'dictGetUInt8',\n  'dictGetUInt16',\n  'dictGetUInt32',\n  'dictGetUInt64',\n  'dictGetInt8',\n  'dictGetInt16',\n  'dictGetInt32',\n  'dictGetInt64',\n  'dictGetFloat32',\n  'dictGetFloat64',\n  'dictGetDate',\n  'dictGetDateTime',\n  'dictGetString',\n  'dictGetUUID',\n  'dictGetTOrDefault',\n  'dictIsIn',\n  'dictGetHierarchy',\n  'dictHas',\n  'visitParamHas',\n  'visitParamExtractUInt',\n  'visitParamExtractInt',\n  'visitParamExtractFloat',\n  'visitParamExtractBool',\n  'visitParamExtractRaw',\n  'visitParamExtractString',\n  'in',\n  'tuple',\n  'tupleElement',\n  'hostName',\n  'visibleWidth',\n  'toTypeName',\n  'blockSize',\n  'materialize',\n  'ignore',\n  'sleep',\n  'currentDatabase',\n  [\n    'joinGet',\n    'fn()',\n    `\n  **joinGet(data_source_name, 'column_value', 'join_keys')**\n\n  Extract data from the table the same way as from a dictionary\n  `,\n    `joinGet(data_source_name, 'column_value', 'join_keys')`,\n    `data_source_name`\n  ],\n  'hasColumnInTable',\n  'formatReadableSize',\n  'isConstant',\n  'isFinite',\n  'isInfinite',\n  'isNaN',\n  'isNull',\n  'isNotNull',\n  'coalesce',\n  'ifNull',\n  'nullIf',\n  'assumeNotNull',\n  'toNullable',\n  'bar',\n  'transform',\n  'notIn',\n  'least',\n  'greatest',\n  'uptime',\n  'version',\n  'rowNumberInAllBlocks',\n  'runningDifference',\n  'MACNumToString',\n  'MACStringToNum',\n  'MACStringToOUI',\n  'getSizeOfEnumType',\n  'toColumnTypeName',\n  'dumpColumnStructure',\n  'defaultValueOfArgumentType',\n  'indexHint',\n  'replicate',\n  'globalIn',\n  'globalNotIn',\n  'lambda',\n  'count',\n  'any',\n  'anyHeavy',\n  'anyLast',\n  'groupBitAnd',\n  'groupBitOr',\n  'groupBitXor',\n  'min',\n  'max',\n  'argMin',\n  'argMax',\n  'sum',\n  'sumWithOverflow',\n  'sumMap',\n  'avg',\n  'avgWeighted',\n  [\n    'uniq',\n    'fn()',\n    `\n  **uniq(x)**\n\n  Calculates the approximate number of different values of the argument. Works for numbers, strings, dates, and dates with times. [Learn more](https://clickhouse-docs.readthedocs.io/en/latest/agg_functions/#uniq-x)\n  `,\n    `uniq(x)`,\n    'x'\n  ],\n  [\n    'uniqHLL12',\n    'fn()',\n    `\n  **uniqHLL12(x)**\n\n  Uses the HyperLogLog algorithm to approximate the number of different values of the argument. It uses 212 5-bit cells. [Learn more](https://clickhouse-docs.readthedocs.io/en/latest/agg_functions/#uniqhll12-x)\n  `,\n    `uniqHLL12(x)`,\n    'x'\n  ],\n  [\n    'uniqExact',\n    'fn()',\n    `\n  **uniqExact(x)**\n\n  Exact number of different values of the argument. There is no reason to fear approximations, so it’s better to use the ‘uniq’ function. You should use the ‘uniqExact’ function if you definitely need an exact result. [Learn more](https://clickhouse-docs.readthedocs.io/en/latest/agg_functions/#uniqexact-x)\n  `,\n    `uniqExact(x)`,\n    'x'\n  ],\n  [\n    'uniqCombined',\n    'fn()',\n    `\n  **uniqCombined(x)**\n\n  Approximately computes the number of different values ​​of the argument. Works for numbers, strings, dates, date-with-time. [Learn more](https://clickhouse-docs.readthedocs.io/en/latest/agg_functions/#uniqcombined-x)\n  `,\n    `uniqCombined(x)`,\n    'x'\n  ],\n  'aggThrow',\n  'groupArray',\n  'groupArraySample',\n  'groupArrayInsertAt',\n  'groupUniqArray',\n  'median',\n  'medianTiming',\n  'medianDeterministic',\n  'medianTimingWeighted',\n  'varSamp',\n  'varPop',\n  'stddevSamp',\n  'stddevPop',\n  'covarSamp',\n  'covarPop',\n  'topK',\n  [\n    'corr',\n    'fn()',\n    `\n  **corr(x,y)**\n\n  Calculates the Pearson correlation coefficient. [Learn more](https://clickhouse.yandex/docs/en/query_language/agg_functions/reference/#corr-x-y)\n  `,\n    `cor(x,y)`,\n    'x'\n  ],\n  [\n    'histogram',\n    'fn()',\n    `\n  **histogram(number_of_bins)(values)**\n\n  Calculates an adaptive histogram. It doesn't guarantee precise results. [Learn more](https://clickhouse.yandex/docs/en/query_language/agg_functions/parametric_functions/#histogram)\n  `,\n    `histogram(number_of_bins)(values)`,\n    'number_of_bins'\n  ],\n  'quantile',\n  'quantiles',\n  'quantileTiming',\n  'quantilesTiming',\n  'quantileTimingWeighted',\n  'quantilesTimingWeighted',\n  'quantileDeterministic',\n  'quantilesDeterministic',\n  'quantileExact',\n  'quantileExactWeighted',\n  'quantileTDigest',\n  'sequenceMatch',\n  'sequenceCount',\n  'windowFunnel',\n  'retention',\n  'uniqUpTo',\n  [\n    'countIf',\n    'fn()',\n    `\n  **countIf(condition)**\n\n  Count the number of rows that satifies a condition. [Learn more](https://clickhouse-docs.readthedocs.io/en/latest/agg_functions/#if-combinator-conditional-aggregate-functions)\n  `,\n    `countIf(cond)`,\n    'cond'\n  ],\n  'anyIf',\n  'anyLastIf',\n  'minIf',\n  'maxIf',\n  'argMinIf',\n  'argMaxIf',\n  'sumIf',\n  'avgIf',\n  'uniqIf',\n  'uniqHLL12If',\n  'uniqExactIf',\n  'groupArrayIf',\n  'groupUniqArrayIf',\n  'medianIf',\n  'medianTimingIf',\n  'medianDeterministicIf',\n  'medianTimingWeightedIf',\n  'varSampIf',\n  'varPopIf',\n  'stddevSampIf',\n  'stddevPopIf',\n  'covarSampIf',\n  'covarPopIf',\n  'corrIf',\n  'quantileIf',\n  'quantilesIf',\n  'quantileTimingIf',\n  'quantilesTimingIf',\n  'quantileTimingWeightedIf',\n  'quantilesTimingWeightedIf',\n  'quantileDeterministicIf',\n  'quantilesDeterministicIf',\n  'sequenceMatchIf',\n  'uniqUpToIf',\n  'arraySplit',\n  'arrayReduce',\n  'arrayReduceInRanges',\n  'countArray',\n  'anyArray',\n  'anyLastArray',\n  'minArray',\n  'maxArray',\n  'argMinArray',\n  'argMaxArray',\n  'sumArray',\n  'avgArray',\n  'uniqArray',\n  'uniqHLL12Array',\n  'uniqExactArray',\n  'groupArrayArray',\n  'groupUniqArrayArray',\n  'medianArray',\n  'medianTimingArray',\n  'medianDeterministicArray',\n  'medianTimingWeightedArray',\n  'varSampArray',\n  'varPopArray',\n  'stddevSampArray',\n  'stddevPopArray',\n  'covarSampArray',\n  'covarPopArray',\n  'corrArray',\n  'quantileArray',\n  'quantilesArray',\n  'quantileTimingArray',\n  'quantilesTimingArray',\n  'quantileTimingWeightedArray',\n  'quantilesTimingWeightedArray',\n  'quantileDeterministicArray',\n  'quantilesDeterministicArray',\n  'sequenceMatchArray',\n  'uniqUpToArray',\n  'countState',\n  'anyState',\n  'anyLastState',\n  'minState',\n  'maxState',\n  'argMinState',\n  'argMaxState',\n  'sumState',\n  'avgState',\n  'uniqState',\n  'uniqHLL12State',\n  'uniqExactState',\n  'groupArrayState',\n  'groupUniqArrayState',\n  'medianState',\n  'medianTimingState',\n  'medianDeterministicState',\n  'medianTimingWeightedState',\n  'varSampState',\n  'varPopState',\n  'stddevSampState',\n  'stddevPopState',\n  'covarSampState',\n  'covarPopState',\n  'corrState',\n  'quantileState',\n  'quantilesState',\n  'quantileTimingState',\n  'quantilesTimingState',\n  'quantileTimingWeightedState',\n  'quantilesTimingWeightedState',\n  'quantileDeterministicState',\n  'quantilesDeterministicState',\n  'sequenceMatchState',\n  'uniqUpToState',\n  'countMerge',\n  'anyMerge',\n  'anyLastMerge',\n  'minMerge',\n  'maxMerge',\n  'argMinMerge',\n  'argMaxMerge',\n  'sumMerge',\n  'avgMerge',\n  'uniqMerge',\n  'uniqHLL12Merge',\n  'uniqExactMerge',\n  'groupArrayMerge',\n  'groupUniqArrayMerge',\n  'medianMerge',\n  'medianTimingMerge',\n  'medianDeterministicMerge',\n  'medianTimingWeightedMerge',\n  'varSampMerge',\n  'varPopMerge',\n  'stddevSampMerge',\n  'stddevPopMerge',\n  'covarSampMerge',\n  'covarPopMerge',\n  'corrMerge',\n  'quantileMerge',\n  'quantilesMerge',\n  'quantileTimingMerge',\n  'quantilesTimingMerge',\n  'quantileTimingWeightedMerge',\n  'quantilesTimingWeightedMerge',\n  'quantileDeterministicMerge',\n  'quantilesDeterministicMerge',\n  'sequenceMatchMerge',\n  'uniqUpToMerge',\n  'file',\n  'merge',\n  'numbers',\n  'remote',\n  'url',\n  'jdbc',\n  [\n    'JSONExtractString',\n    'fn()',\n    `\n  **JSONExtractString(json[, indices_or_keys]…)**\n  \n  Parses a JSON and extract a string. This function is similar to visitParamExtractString functions. [Learn more](https://clickhouse.tech/docs/en/query_language/functions/json_functions/#jsonextractstringjson-indices-or-keys)\n  `,\n    `JSONExtractString(json[, indices_or_keys]…)`,\n    'json'\n  ],\n  [\n    'JSONExtractBool',\n    'fn()',\n    `\n  **JSONExtractBool(json[, indices_or_keys]…)**\n  \n  Parses a JSON and extract a value. These functions are similar to visitParam functions. If the value does not exist or has a wrong type, 0 will be returned. [Learn more](https://clickhouse.tech/docs/en/query_language/functions/json_functions/#jsonextractbooljson-indices-or-keys)\n  `,\n    `JSONExtractBool(json[, indices_or_keys]…)`,\n    'json'\n  ],\n  [\n    'JSONExtract',\n    'fn()',\n    `\n  **JSONExtract(json[, indices_or_keys]…)**\n  \n  Parses a JSON and extract a value of the given ClickHouse data type. [Learn more](https://clickhouse.tech/docs/en/query_language/functions/json_functions/#jsonextractjson-indices-or-keys-return-type)\n  `,\n    `JSONExtract(json[, indices_or_keys]…)`,\n    'json'\n  ],\n  [\n    'JSONExtractArrayRaw',\n    'fn()',\n    `\n  **JSONExtractArrayRaw(json)**\n\n  Returns an array on unparsed json array elements from JSON string\n  `,\n    `JSONExtractArrayRaw(json)`,\n    'json'\n  ],\n  'initializeAggregation',\n  'parseDateTimeBestEffortUS'\n]\n","/**\n * Constants for token types\n */\nexport default {\n  WORD: 'word',\n  STRING: 'string',\n  RESERVED: 'reserved',\n  RESERVED_TOP_LEVEL: 'reserved-top-level',\n  RESERVED_TOP_LEVEL_NO_INDENT: 'reserved-top-level-no-indent',\n  RESERVED_NEWLINE: 'reserved-newline',\n  OPERATOR: 'operator',\n  OPEN_PAREN: 'open-paren',\n  CLOSE_PAREN: 'close-paren',\n  LINE_COMMENT: 'line-comment',\n  BLOCK_COMMENT: 'block-comment',\n  NUMBER: 'number',\n  PLACEHOLDER: 'placeholder',\n};\n","// Only removes spaces, not newlines\nexport const trimSpacesEnd = (str) => str.replace(/[ \\t]+$/u, '');\n\n// Last element from array\nexport const last = (arr) => arr[arr.length - 1];\n\n// True array is empty, or it's not an array at all\nexport const isEmpty = (arr) => !Array.isArray(arr) || arr.length === 0;\n\n// Escapes regex special chars\nexport const escapeRegExp = (string) => string.replace(/[.*+?^${}()|[\\]\\\\]/gu, '\\\\$&');\n\n// Sorts strings by length, so that longer ones are first\n// Also sorts alphabetically after sorting by length.\nexport const sortByLengthDesc = (strings) =>\n  strings.sort((a, b) => {\n    return b.length - a.length || a.localeCompare(b);\n  });\n","import { last } from '../utils';\n\nconst INDENT_TYPE_TOP_LEVEL = 'top-level';\nconst INDENT_TYPE_BLOCK_LEVEL = 'block-level';\n\n/**\n * Manages indentation levels.\n *\n * There are two types of indentation levels:\n *\n * - BLOCK_LEVEL : increased by open-parenthesis\n * - TOP_LEVEL : increased by RESERVED_TOP_LEVEL words\n */\nexport default class Indentation {\n  /**\n   * @param {String} indent Indent value, default is \"  \" (2 spaces)\n   */\n  constructor(indent) {\n    this.indent = indent || '  ';\n    this.indentTypes = [];\n  }\n\n  /**\n   * Returns current indentation string.\n   * @return {String}\n   */\n  getIndent() {\n    return this.indent.repeat(this.indentTypes.length);\n  }\n\n  /**\n   * Increases indentation by one top-level indent.\n   */\n  increaseTopLevel() {\n    this.indentTypes.push(INDENT_TYPE_TOP_LEVEL);\n  }\n\n  /**\n   * Increases indentation by one block-level indent.\n   */\n  increaseBlockLevel() {\n    this.indentTypes.push(INDENT_TYPE_BLOCK_LEVEL);\n  }\n\n  /**\n   * Decreases indentation by one top-level indent.\n   * Does nothing when the previous indent is not top-level.\n   */\n  decreaseTopLevel() {\n    if (this.indentTypes.length > 0 && last(this.indentTypes) === INDENT_TYPE_TOP_LEVEL) {\n      this.indentTypes.pop();\n    }\n  }\n\n  /**\n   * Decreases indentation by one block-level indent.\n   * If there are top-level indents within the block-level indent,\n   * throws away these as well.\n   */\n  decreaseBlockLevel() {\n    while (this.indentTypes.length > 0) {\n      const type = this.indentTypes.pop();\n      if (type !== INDENT_TYPE_TOP_LEVEL) {\n        break;\n      }\n    }\n  }\n\n  resetIndentation() {\n    this.indentTypes = [];\n  }\n}\n","import tokenTypes from './tokenTypes';\n\nconst INLINE_MAX_LENGTH = 50;\n\n/**\n * Bookkeeper for inline blocks.\n *\n * Inline blocks are parenthized expressions that are shorter than INLINE_MAX_LENGTH.\n * These blocks are formatted on a single line, unlike longer parenthized\n * expressions where open-parenthesis causes newline and increase of indentation.\n */\nexport default class InlineBlock {\n  constructor() {\n    this.level = 0;\n  }\n\n  /**\n   * Begins inline block when lookahead through upcoming tokens determines\n   * that the block would be smaller than INLINE_MAX_LENGTH.\n   * @param  {Object[]} tokens Array of all tokens\n   * @param  {Number} index Current token position\n   */\n  beginIfPossible(tokens, index) {\n    if (this.level === 0 && this.isInlineBlock(tokens, index)) {\n      this.level = 1;\n    } else if (this.level > 0) {\n      this.level++;\n    } else {\n      this.level = 0;\n    }\n  }\n\n  /**\n   * Finishes current inline block.\n   * There might be several nested ones.\n   */\n  end() {\n    this.level--;\n  }\n\n  /**\n   * True when inside an inline block\n   * @return {Boolean}\n   */\n  isActive() {\n    return this.level > 0;\n  }\n\n  // Check if this should be an inline parentheses block\n  // Examples are \"NOW()\", \"COUNT(*)\", \"int(10)\", key(`somecolumn`), DECIMAL(7,2)\n  isInlineBlock(tokens, index) {\n    let length = 0;\n    let level = 0;\n\n    for (let i = index; i < tokens.length; i++) {\n      const token = tokens[i];\n      length += token.value.length;\n\n      // Overran max length\n      if (length > INLINE_MAX_LENGTH) {\n        return false;\n      }\n\n      if (token.type === tokenTypes.OPEN_PAREN) {\n        level++;\n      } else if (token.type === tokenTypes.CLOSE_PAREN) {\n        level--;\n        if (level === 0) {\n          return true;\n        }\n      }\n\n      if (this.isForbiddenToken(token)) {\n        return false;\n      }\n    }\n    return false;\n  }\n\n  // Reserved words that cause newlines, comments and semicolons\n  // are not allowed inside inline parentheses block\n  isForbiddenToken({ type, value }) {\n    return (\n      type === tokenTypes.RESERVED_TOP_LEVEL ||\n      type === tokenTypes.RESERVED_NEWLINE ||\n      type === tokenTypes.COMMENT ||\n      type === tokenTypes.BLOCK_COMMENT ||\n      value === ';'\n    );\n  }\n}\n","/**\n * Handles placeholder replacement with given params.\n */\nexport default class Params {\n  /**\n   * @param {Object} params\n   */\n  constructor(params) {\n    this.params = params;\n    this.index = 0;\n  }\n\n  /**\n   * Returns param value that matches given placeholder with param key.\n   * @param {Object} token\n   *   @param {String} token.key Placeholder key\n   *   @param {String} token.value Placeholder value\n   * @return {String} param or token.value when params are missing\n   */\n  get({ key, value }) {\n    if (!this.params) {\n      return value;\n    }\n    if (key) {\n      return this.params[key];\n    }\n    return this.params[this.index++];\n  }\n}\n","import tokenTypes from './tokenTypes';\n\nconst isToken = (type, regex) => (token) => token?.type === type && regex.test(token?.value);\n\nexport const isAnd = isToken(tokenTypes.RESERVED_NEWLINE, /^AND$/iu);\n\nexport const isBetween = isToken(tokenTypes.RESERVED, /^BETWEEN$/iu);\n\nexport const isLimit = isToken(tokenTypes.RESERVED_TOP_LEVEL, /^LIMIT$/iu);\n\nexport const isSet = isToken(tokenTypes.RESERVED_TOP_LEVEL, /^SET$/iu);\n\nexport const isBy = isToken(tokenTypes.RESERVED, /^BY$/iu);\n\nexport const isWindow = isToken(tokenTypes.RESERVED_TOP_LEVEL, /^WINDOW$/iu);\n\nexport const isEnd = isToken(tokenTypes.CLOSE_PAREN, /^END$/iu);\n","import tokenTypes from './tokenTypes';\nimport Indentation from './Indentation';\nimport InlineBlock from './InlineBlock';\nimport Params from './Params';\nimport { trimSpacesEnd } from '../utils';\nimport { isAnd, isBetween, isLimit } from './token';\n\nexport default class Formatter {\n  /**\n   * @param {Object} cfg\n   *  @param {String} cfg.language\n   *  @param {String} cfg.indent\n   *  @param {Boolean} cfg.uppercase\n   *  @param {Integer} cfg.linesBetweenQueries\n   *  @param {Object} cfg.params\n   */\n  constructor(cfg) {\n    this.cfg = cfg;\n    this.indentation = new Indentation(this.cfg.indent);\n    this.inlineBlock = new InlineBlock();\n    this.params = new Params(this.cfg.params);\n    this.previousReservedToken = {};\n    this.tokens = [];\n    this.index = 0;\n  }\n\n  /**\n   * SQL Tokenizer for this formatter, provided by subclasses.\n   */\n  tokenizer() {\n    throw new Error('tokenizer() not implemented by subclass');\n  }\n\n  /**\n   * Reprocess and modify a token based on parsed context.\n   *\n   * @param {Object} token The token to modify\n   *  @param {String} token.type\n   *  @param {String} token.value\n   * @return {Object} new token or the original\n   *  @return {String} token.type\n   *  @return {String} token.value\n   */\n  tokenOverride(token) {\n    // subclasses can override this to modify tokens during formatting\n    return token;\n  }\n\n  /**\n   * Formats whitespace in a SQL string to make it easier to read.\n   *\n   * @param {String} query The SQL query string\n   * @return {String} formatted query\n   */\n  format(query) {\n    this.tokens = this.tokenizer().tokenize(query);\n    const formattedQuery = this.getFormattedQueryFromTokens();\n\n    return formattedQuery.trim();\n  }\n\n  getFormattedQueryFromTokens() {\n    let formattedQuery = '';\n\n    this.tokens.forEach((token, index) => {\n      this.index = index;\n\n      token = this.tokenOverride(token);\n\n      if (token.type === tokenTypes.LINE_COMMENT) {\n        formattedQuery = this.formatLineComment(token, formattedQuery);\n      } else if (token.type === tokenTypes.BLOCK_COMMENT) {\n        formattedQuery = this.formatBlockComment(token, formattedQuery);\n      } else if (token.type === tokenTypes.RESERVED_TOP_LEVEL) {\n        formattedQuery = this.formatTopLevelReservedWord(token, formattedQuery);\n        this.previousReservedToken = token;\n      } else if (token.type === tokenTypes.RESERVED_TOP_LEVEL_NO_INDENT) {\n        formattedQuery = this.formatTopLevelReservedWordNoIndent(token, formattedQuery);\n        this.previousReservedToken = token;\n      } else if (token.type === tokenTypes.RESERVED_NEWLINE) {\n        formattedQuery = this.formatNewlineReservedWord(token, formattedQuery);\n        this.previousReservedToken = token;\n      } else if (token.type === tokenTypes.RESERVED) {\n        formattedQuery = this.formatWithSpaces(token, formattedQuery);\n        this.previousReservedToken = token;\n      } else if (token.type === tokenTypes.OPEN_PAREN) {\n        formattedQuery = this.formatOpeningParentheses(token, formattedQuery);\n      } else if (token.type === tokenTypes.CLOSE_PAREN) {\n        formattedQuery = this.formatClosingParentheses(token, formattedQuery);\n      } else if (token.type === tokenTypes.PLACEHOLDER) {\n        formattedQuery = this.formatPlaceholder(token, formattedQuery);\n      } else if (token.value === ',') {\n        formattedQuery = this.formatComma(token, formattedQuery);\n      } else if (token.value === ':') {\n        formattedQuery = this.formatWithSpaceAfter(token, formattedQuery);\n      } else if (token.value === '.') {\n        formattedQuery = this.formatWithoutSpaces(token, formattedQuery);\n      } else if (token.value === ';') {\n        formattedQuery = this.formatQuerySeparator(token, formattedQuery);\n      } else {\n        formattedQuery = this.formatWithSpaces(token, formattedQuery);\n      }\n    });\n    return formattedQuery;\n  }\n\n  formatLineComment(token, query) {\n    return this.addNewline(query + this.show(token));\n  }\n\n  formatBlockComment(token, query) {\n    return this.addNewline(this.addNewline(query) + this.indentComment(token.value));\n  }\n\n  indentComment(comment) {\n    return comment.replace(/\\n[ \\t]*/gu, '\\n' + this.indentation.getIndent() + ' ');\n  }\n\n  formatTopLevelReservedWordNoIndent(token, query) {\n    this.indentation.decreaseTopLevel();\n    query = this.addNewline(query) + this.equalizeWhitespace(this.show(token));\n    return this.addNewline(query);\n  }\n\n  formatTopLevelReservedWord(token, query) {\n    this.indentation.decreaseTopLevel();\n\n    query = this.addNewline(query);\n\n    this.indentation.increaseTopLevel();\n\n    query += this.equalizeWhitespace(this.show(token));\n    return this.addNewline(query);\n  }\n\n  formatNewlineReservedWord(token, query) {\n    if (isAnd(token) && isBetween(this.tokenLookBehind(2))) {\n      return this.formatWithSpaces(token, query);\n    }\n    return this.addNewline(query) + this.equalizeWhitespace(this.show(token)) + ' ';\n  }\n\n  // Replace any sequence of whitespace characters with single space\n  equalizeWhitespace(string) {\n    return string.replace(/\\s+/gu, ' ');\n  }\n\n  // Opening parentheses increase the block indent level and start a new line\n  formatOpeningParentheses(token, query) {\n    // Take out the preceding space unless there was whitespace there in the original query\n    // or another opening parens or line comment\n    const preserveWhitespaceFor = {\n      [tokenTypes.OPEN_PAREN]: true,\n      [tokenTypes.LINE_COMMENT]: true,\n      [tokenTypes.OPERATOR]: true,\n    };\n    if (\n      token.whitespaceBefore.length === 0 &&\n      !preserveWhitespaceFor[this.tokenLookBehind()?.type]\n    ) {\n      query = trimSpacesEnd(query);\n    }\n    query += this.show(token);\n\n    this.inlineBlock.beginIfPossible(this.tokens, this.index);\n\n    if (!this.inlineBlock.isActive()) {\n      this.indentation.increaseBlockLevel();\n      query = this.addNewline(query);\n    }\n    return query;\n  }\n\n  // Closing parentheses decrease the block indent level\n  formatClosingParentheses(token, query) {\n    if (this.inlineBlock.isActive()) {\n      this.inlineBlock.end();\n      return this.formatWithSpaceAfter(token, query);\n    } else {\n      this.indentation.decreaseBlockLevel();\n      return this.formatWithSpaces(token, this.addNewline(query));\n    }\n  }\n\n  formatPlaceholder(token, query) {\n    return query + this.params.get(token) + ' ';\n  }\n\n  // Commas start a new line (unless within inline parentheses or SQL \"LIMIT\" clause)\n  formatComma(token, query) {\n    query = trimSpacesEnd(query) + this.show(token) + ' ';\n\n    if (this.inlineBlock.isActive()) {\n      return query;\n    } else if (isLimit(this.previousReservedToken)) {\n      return query;\n    } else {\n      return this.addNewline(query);\n    }\n  }\n\n  formatWithSpaceAfter(token, query) {\n    return trimSpacesEnd(query) + this.show(token) + ' ';\n  }\n\n  formatWithoutSpaces(token, query) {\n    return trimSpacesEnd(query) + this.show(token);\n  }\n\n  formatWithSpaces(token, query) {\n    return query + this.show(token) + ' ';\n  }\n\n  formatQuerySeparator(token, query) {\n    this.indentation.resetIndentation();\n    return trimSpacesEnd(query) + this.show(token) + '\\n'.repeat(this.cfg.linesBetweenQueries || 1);\n  }\n\n  // Converts token to string (uppercasing it if needed)\n  show({ type, value }) {\n    if (\n      this.cfg.uppercase &&\n      (type === tokenTypes.RESERVED ||\n        type === tokenTypes.RESERVED_TOP_LEVEL ||\n        type === tokenTypes.RESERVED_TOP_LEVEL_NO_INDENT ||\n        type === tokenTypes.RESERVED_NEWLINE ||\n        type === tokenTypes.OPEN_PAREN ||\n        type === tokenTypes.CLOSE_PAREN)\n    ) {\n      return value.toUpperCase();\n    } else {\n      return value;\n    }\n  }\n\n  addNewline(query) {\n    query = trimSpacesEnd(query);\n    if (!query.endsWith('\\n')) {\n      query += '\\n';\n    }\n    return query + this.indentation.getIndent();\n  }\n\n  tokenLookBehind(n = 1) {\n    return this.tokens[this.index - n];\n  }\n\n  tokenLookAhead(n = 1) {\n    return this.tokens[this.index + n];\n  }\n}\n","import { escapeRegExp, isEmpty, sortByLengthDesc } from '../utils';\n\nexport function createOperatorRegex(multiLetterOperators) {\n  return new RegExp(\n    `^(${sortByLengthDesc(multiLetterOperators).map(escapeRegExp).join('|')}|.)`,\n    'u'\n  );\n}\n\nexport function createLineCommentRegex(lineCommentTypes) {\n  return new RegExp(\n    `^((?:${lineCommentTypes.map((c) => escapeRegExp(c)).join('|')}).*?)(?:\\r\\n|\\r|\\n|$)`,\n    'u'\n  );\n}\n\nexport function createReservedWordRegex(reservedWords) {\n  if (reservedWords.length === 0) {\n    return new RegExp(`^\\b$`, 'u');\n  }\n  const reservedWordsPattern = sortByLengthDesc(reservedWords).join('|').replace(/ /gu, '\\\\s+');\n  return new RegExp(`^(${reservedWordsPattern})\\\\b`, 'iu');\n}\n\nexport function createWordRegex(specialChars = []) {\n  return new RegExp(\n    `^([\\\\p{Alphabetic}\\\\p{Mark}\\\\p{Decimal_Number}\\\\p{Connector_Punctuation}\\\\p{Join_Control}${specialChars.join(\n      ''\n    )}]+)`,\n    'u'\n  );\n}\n\nexport function createStringRegex(stringTypes) {\n  return new RegExp('^(' + createStringPattern(stringTypes) + ')', 'u');\n}\n\n// This enables the following string patterns:\n// 1. backtick quoted string using `` to escape\n// 2. square bracket quoted string (SQL Server) using ]] to escape\n// 3. double quoted string using \"\" or \\\" to escape\n// 4. single quoted string using '' or \\' to escape\n// 5. national character quoted string using N'' or N\\' to escape\n// 6. Unicode single-quoted string using \\' to escape\n// 7. Unicode double-quoted string using \\\" to escape\n// 8. PostgreSQL dollar-quoted strings\nexport function createStringPattern(stringTypes) {\n  const patterns = {\n    '``': '((`[^`]*($|`))+)',\n    '{}': '((\\\\{[^\\\\}]*($|\\\\}))+)',\n    '[]': '((\\\\[[^\\\\]]*($|\\\\]))(\\\\][^\\\\]]*($|\\\\]))*)',\n    '\"\"': '((\"[^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*(\"|$))+)',\n    \"''\": \"(('[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*('|$))+)\",\n    \"N''\": \"((N'[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*('|$))+)\",\n    \"U&''\": \"((U&'[^'\\\\\\\\]*(?:\\\\\\\\.[^'\\\\\\\\]*)*('|$))+)\",\n    'U&\"\"': '((U&\"[^\"\\\\\\\\]*(?:\\\\\\\\.[^\"\\\\\\\\]*)*(\"|$))+)',\n    $$: '((?<tag>\\\\$\\\\w*\\\\$)[\\\\s\\\\S]*?(?:\\\\k<tag>|$))',\n  };\n\n  return stringTypes.map((t) => patterns[t]).join('|');\n}\n\nexport function createParenRegex(parens) {\n  return new RegExp('^(' + parens.map(escapeParen).join('|') + ')', 'iu');\n}\n\nfunction escapeParen(paren) {\n  if (paren.length === 1) {\n    // A single punctuation character\n    return escapeRegExp(paren);\n  } else {\n    // longer word\n    return '\\\\b' + paren + '\\\\b';\n  }\n}\n\nexport function createPlaceholderRegex(types, pattern) {\n  if (isEmpty(types)) {\n    return false;\n  }\n  const typesRegex = types.map(escapeRegExp).join('|');\n\n  return new RegExp(`^((?:${typesRegex})(?:${pattern}))`, 'u');\n}\n","import tokenTypes from './tokenTypes';\nimport * as regexFactory from './regexFactory';\nimport { escapeRegExp } from '../utils';\n\nexport default class Tokenizer {\n  /**\n   * @param {Object} cfg\n   *  @param {String[]} cfg.reservedWords Reserved words in SQL\n   *  @param {String[]} cfg.reservedTopLevelWords Words that are set to new line separately\n   *  @param {String[]} cfg.reservedNewlineWords Words that are set to newline\n   *  @param {String[]} cfg.reservedTopLevelWordsNoIndent Words that are top level but have no indentation\n   *  @param {String[]} cfg.stringTypes String types to enable: \"\", '', ``, [], N''\n   *  @param {String[]} cfg.openParens Opening parentheses to enable, like (, [\n   *  @param {String[]} cfg.closeParens Closing parentheses to enable, like ), ]\n   *  @param {String[]} cfg.indexedPlaceholderTypes Prefixes for indexed placeholders, like ?\n   *  @param {String[]} cfg.namedPlaceholderTypes Prefixes for named placeholders, like @ and :\n   *  @param {String[]} cfg.lineCommentTypes Line comments to enable, like # and --\n   *  @param {String[]} cfg.specialWordChars Special chars that can be found inside of words, like @ and #\n   *  @param {String[]} [cfg.operator] Additional operators to recognize\n   */\n  constructor(cfg) {\n    this.WHITESPACE_REGEX = /^(\\s+)/u;\n    this.NUMBER_REGEX = /^((-\\s*)?[0-9]+(\\.[0-9]+)?([eE]-?[0-9]+(\\.[0-9]+)?)?|0x[0-9a-fA-F]+|0b[01]+)\\b/u;\n\n    this.OPERATOR_REGEX = regexFactory.createOperatorRegex([\n      '<>',\n      '<=',\n      '>=',\n      ...(cfg.operators || []),\n    ]);\n\n    this.BLOCK_COMMENT_REGEX = /^(\\/\\*[^]*?(?:\\*\\/|$))/u;\n    this.LINE_COMMENT_REGEX = regexFactory.createLineCommentRegex(cfg.lineCommentTypes);\n\n    this.RESERVED_TOP_LEVEL_REGEX = regexFactory.createReservedWordRegex(cfg.reservedTopLevelWords);\n    this.RESERVED_TOP_LEVEL_NO_INDENT_REGEX = regexFactory.createReservedWordRegex(\n      cfg.reservedTopLevelWordsNoIndent\n    );\n    this.RESERVED_NEWLINE_REGEX = regexFactory.createReservedWordRegex(cfg.reservedNewlineWords);\n    this.RESERVED_PLAIN_REGEX = regexFactory.createReservedWordRegex(cfg.reservedWords);\n\n    this.WORD_REGEX = regexFactory.createWordRegex(cfg.specialWordChars);\n    this.STRING_REGEX = regexFactory.createStringRegex(cfg.stringTypes);\n\n    this.OPEN_PAREN_REGEX = regexFactory.createParenRegex(cfg.openParens);\n    this.CLOSE_PAREN_REGEX = regexFactory.createParenRegex(cfg.closeParens);\n\n    this.INDEXED_PLACEHOLDER_REGEX = regexFactory.createPlaceholderRegex(\n      cfg.indexedPlaceholderTypes,\n      '[0-9]*'\n    );\n    this.IDENT_NAMED_PLACEHOLDER_REGEX = regexFactory.createPlaceholderRegex(\n      cfg.namedPlaceholderTypes,\n      '[a-zA-Z0-9._$]+'\n    );\n    this.STRING_NAMED_PLACEHOLDER_REGEX = regexFactory.createPlaceholderRegex(\n      cfg.namedPlaceholderTypes,\n      regexFactory.createStringPattern(cfg.stringTypes)\n    );\n  }\n\n  /**\n   * Takes a SQL string and breaks it into tokens.\n   * Each token is an object with type and value.\n   *\n   * @param {String} input The SQL string\n   * @return {Object[]} tokens An array of tokens.\n   *  @return {String} token.type\n   *  @return {String} token.value\n   *  @return {String} token.whitespaceBefore Preceding whitespace\n   */\n  tokenize(input) {\n    const tokens = [];\n    let token;\n\n    // Keep processing the string until it is empty\n    while (input.length) {\n      // grab any preceding whitespace\n      const whitespaceBefore = this.getWhitespace(input);\n      input = input.substring(whitespaceBefore.length);\n\n      if (input.length) {\n        // Get the next token and the token type\n        token = this.getNextToken(input, token);\n        // Advance the string\n        input = input.substring(token.value.length);\n\n        tokens.push({ ...token, whitespaceBefore });\n      }\n    }\n    return tokens;\n  }\n\n  getWhitespace(input) {\n    const matches = input.match(this.WHITESPACE_REGEX);\n    return matches ? matches[1] : '';\n  }\n\n  getNextToken(input, previousToken) {\n    return (\n      this.getCommentToken(input) ||\n      this.getStringToken(input) ||\n      this.getOpenParenToken(input) ||\n      this.getCloseParenToken(input) ||\n      this.getPlaceholderToken(input) ||\n      this.getNumberToken(input) ||\n      this.getReservedWordToken(input, previousToken) ||\n      this.getWordToken(input) ||\n      this.getOperatorToken(input)\n    );\n  }\n\n  getCommentToken(input) {\n    return this.getLineCommentToken(input) || this.getBlockCommentToken(input);\n  }\n\n  getLineCommentToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.LINE_COMMENT,\n      regex: this.LINE_COMMENT_REGEX,\n    });\n  }\n\n  getBlockCommentToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.BLOCK_COMMENT,\n      regex: this.BLOCK_COMMENT_REGEX,\n    });\n  }\n\n  getStringToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.STRING,\n      regex: this.STRING_REGEX,\n    });\n  }\n\n  getOpenParenToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.OPEN_PAREN,\n      regex: this.OPEN_PAREN_REGEX,\n    });\n  }\n\n  getCloseParenToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.CLOSE_PAREN,\n      regex: this.CLOSE_PAREN_REGEX,\n    });\n  }\n\n  getPlaceholderToken(input) {\n    return (\n      this.getIdentNamedPlaceholderToken(input) ||\n      this.getStringNamedPlaceholderToken(input) ||\n      this.getIndexedPlaceholderToken(input)\n    );\n  }\n\n  getIdentNamedPlaceholderToken(input) {\n    return this.getPlaceholderTokenWithKey({\n      input,\n      regex: this.IDENT_NAMED_PLACEHOLDER_REGEX,\n      parseKey: (v) => v.slice(1),\n    });\n  }\n\n  getStringNamedPlaceholderToken(input) {\n    return this.getPlaceholderTokenWithKey({\n      input,\n      regex: this.STRING_NAMED_PLACEHOLDER_REGEX,\n      parseKey: (v) =>\n        this.getEscapedPlaceholderKey({ key: v.slice(2, -1), quoteChar: v.slice(-1) }),\n    });\n  }\n\n  getIndexedPlaceholderToken(input) {\n    return this.getPlaceholderTokenWithKey({\n      input,\n      regex: this.INDEXED_PLACEHOLDER_REGEX,\n      parseKey: (v) => v.slice(1),\n    });\n  }\n\n  getPlaceholderTokenWithKey({ input, regex, parseKey }) {\n    const token = this.getTokenOnFirstMatch({ input, regex, type: tokenTypes.PLACEHOLDER });\n    if (token) {\n      token.key = parseKey(token.value);\n    }\n    return token;\n  }\n\n  getEscapedPlaceholderKey({ key, quoteChar }) {\n    return key.replace(new RegExp(escapeRegExp('\\\\' + quoteChar), 'gu'), quoteChar);\n  }\n\n  // Decimal, binary, or hex numbers\n  getNumberToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.NUMBER,\n      regex: this.NUMBER_REGEX,\n    });\n  }\n\n  // Punctuation and symbols\n  getOperatorToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.OPERATOR,\n      regex: this.OPERATOR_REGEX,\n    });\n  }\n\n  getReservedWordToken(input, previousToken) {\n    // A reserved word cannot be preceded by a \".\"\n    // this makes it so in \"mytable.from\", \"from\" is not considered a reserved word\n    if (previousToken && previousToken.value && previousToken.value === '.') {\n      return undefined;\n    }\n    return (\n      this.getTopLevelReservedToken(input) ||\n      this.getNewlineReservedToken(input) ||\n      this.getTopLevelReservedTokenNoIndent(input) ||\n      this.getPlainReservedToken(input)\n    );\n  }\n\n  getTopLevelReservedToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.RESERVED_TOP_LEVEL,\n      regex: this.RESERVED_TOP_LEVEL_REGEX,\n    });\n  }\n\n  getNewlineReservedToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.RESERVED_NEWLINE,\n      regex: this.RESERVED_NEWLINE_REGEX,\n    });\n  }\n\n  getTopLevelReservedTokenNoIndent(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.RESERVED_TOP_LEVEL_NO_INDENT,\n      regex: this.RESERVED_TOP_LEVEL_NO_INDENT_REGEX,\n    });\n  }\n\n  getPlainReservedToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.RESERVED,\n      regex: this.RESERVED_PLAIN_REGEX,\n    });\n  }\n\n  getWordToken(input) {\n    return this.getTokenOnFirstMatch({\n      input,\n      type: tokenTypes.WORD,\n      regex: this.WORD_REGEX,\n    });\n  }\n\n  getTokenOnFirstMatch({ input, type, regex }) {\n    const matches = input.match(regex);\n\n    return matches ? { type, value: matches[1] } : undefined;\n  }\n}\n","import keywords from 'editor-languages/lib/clickhouse/keywords';\nimport builtins from 'editor-languages/lib/clickhouse/builtins';\nimport Formatter from '../core/Formatter';\nimport Tokenizer from '../core/Tokenizer';\n\nconst reservedWords = [\n  ...keywords.map((item) => (Array.isArray(item) ? item[0] : item)),\n  ...builtins.map((item) => (Array.isArray(item) ? item[0] : item)),\n];\n\nconst reservedTopLevelWords = [\n  'CASE',\n  'END',\n  'EXCEPT',\n  'FROM',\n  'ORDER BY',\n  'HAVING',\n  'GROUP BY',\n  'LIMIT',\n  'SELECT',\n  'WHERE',\n  'WITH',\n  'PREWHERE',\n];\n\nconst reservedTopLevelWordsNoIndent = ['UNION', 'UNION ALL'];\n\nconst reservedNewlineWords = [\n  'AND',\n  'ELSE',\n  'OR',\n  'WHEN',\n  'JOIN',\n  'INNER JOIN',\n  'ANY LEFT JOIN',\n  'ANY RIGHT JOIN',\n  'ANY INNER JOIN',\n  'LEFT JOIN',\n  'LEFT OUTER JOIN',\n  'RIGHT JOIN',\n  'RIGHT OUTER JOIN',\n  'FULL JOIN',\n  'FULL OUTER JOIN',\n  'CROSS JOIN',\n  'NATURAL JOIN',\n];\n\nexport default class TinybirdFormatter extends Formatter {\n  tokenizer() {\n    return new Tokenizer({\n      reservedWords,\n      reservedTopLevelWords,\n      reservedNewlineWords,\n      reservedTopLevelWordsNoIndent,\n      stringTypes: [`\"\"`, \"''\", \"U&''\", 'U&\"\"', '$$'],\n      openParens: ['(', '['],\n      closeParens: [')', ']'],\n      indexedPlaceholderTypes: ['$'],\n      namedPlaceholderTypes: [],\n      lineCommentTypes: ['--'],\n      specialWordChars: ['{%', '%}', '{{', '}}'],\n      operators: [\n        '!=',\n        '<<',\n        '>>',\n        '||/',\n        '|/',\n        '::',\n        '->>',\n        '->',\n        '~~*',\n        '~~',\n        '!~~*',\n        '!~~',\n        '~*',\n        '!~*',\n        '!~',\n        '!!',\n        '%',\n      ],\n    });\n  }\n}\n","// import Db2Formatter from './languages/Db2Formatter';\n// import MariaDbFormatter from './languages/MariaDbFormatter';\n// import MySqlFormatter from './languages/MySqlFormatter';\n// import N1qlFormatter from './languages/N1qlFormatter';\n// import PlSqlFormatter from './languages/PlSqlFormatter';\n// import PostgreSqlFormatter from './languages/PostgreSqlFormatter';\n// import RedshiftFormatter from './languages/RedshiftFormatter';\n// import SparkSqlFormatter from './languages/SparkSqlFormatter';\n// import TSqlFormatter from './languages/TSqlFormatter';\n// import StandardSqlFormatter from './languages/StandardSqlFormatter';\nimport TinybirdFormatter from './languages/TinybirdFormatter';\n\nconst formatters = {\n  // db2: Db2Formatter,\n  // mariadb: MariaDbFormatter,\n  // mysql: MySqlFormatter,\n  // n1ql: N1qlFormatter,\n  // plsql: PlSqlFormatter,\n  // postgresql: PostgreSqlFormatter,\n  // redshift: RedshiftFormatter,\n  // spark: SparkSqlFormatter,\n  // sql: StandardSqlFormatter,\n  // tsql: TSqlFormatter,\n  tinybird: TinybirdFormatter,\n};\n\n/**\n * Format whitespace in a query to make it easier to read.\n *\n * @param {String} query\n * @param {Object} cfg\n *  @param {String} cfg.language Query language, default is Standard SQL\n *  @param {String} cfg.indent Characters used for indentation, default is \"  \" (2 spaces)\n *  @param {Boolean} cfg.uppercase Converts keywords to uppercase\n *  @param {Integer} cfg.linesBetweenQueries How many line breaks between queries\n *  @param {Object} cfg.params Collection of params for placeholder replacement\n * @return {String}\n */\nexport const format = (query, cfg = {}) => {\n  if (typeof query !== 'string') {\n    throw new Error('Invalid query argument. Extected string, instead got ' + typeof query);\n  }\n\n  return new TinybirdFormatter(cfg).format(query);\n};\n\nexport const supportedDialects = Object.keys(formatters);\n"],"sourceRoot":""}